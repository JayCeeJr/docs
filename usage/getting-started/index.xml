<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vela â€“ Getting Started</title><link>https://go-vela.github.io/docs/usage/getting-started/</link><description>Recent content in Getting Started on Vela</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://go-vela.github.io/docs/usage/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Usage: Authenticate</title><link>https://go-vela.github.io/docs/usage/getting-started/authenticate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-vela.github.io/docs/usage/getting-started/authenticate/</guid><description>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;/div>
&lt;h2 id="ui">UI&lt;/h2>
&lt;p>Navigate to your deployed instance and follow the OAuth workflow presented on the web interface.&lt;/p>
&lt;h2 id="cli">CLI&lt;/h2>
&lt;p>Please see authentication in the &lt;a href="https://go-vela.github.io/docs/docs/cli/authentication/">CLI reference&lt;/a>.&lt;/p>
&lt;p>&lt;em>If you have not yet installed the CLI, see &lt;a href="https://go-vela.github.io/docs/docs/cli/install/">CLI install reference&lt;/a> first.&lt;/em>&lt;/p>
&lt;h2 id="api">API&lt;/h2>
&lt;p>Please see authentication in the &lt;a href="https://go-vela.github.io/docs/docs/api/authentication/">API reference&lt;/a>.&lt;/p>
&lt;h2 id="sdk">SDK&lt;/h2>
&lt;p>Please see authentication in the &lt;a href="https://go-vela.github.io/docs/docs/sdk/go/authentication/">sdk reference&lt;/a>.&lt;/p></description></item><item><title>Usage: Roles</title><link>https://go-vela.github.io/docs/usage/getting-started/roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-vela.github.io/docs/usage/getting-started/roles/</guid><description>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;/div>
&lt;p>Vela does not maintain any authentication (AuthN) or authorization (AuthZ) internally, but instead inherits its access from the source (version control) provider. More information on GitHub&amp;rsquo;s access model can be found in their &lt;a href="https://help.github.com/en/github/getting-started-with-github/access-permissions-on-github">documentation&lt;/a>.&lt;/p>
&lt;p>Platform Roles:&lt;/p>
&lt;ul>
&lt;li>Admin&lt;/li>
&lt;/ul>
&lt;p>Source Provider Roles:&lt;/p>
&lt;ul>
&lt;li>Admin&lt;/li>
&lt;li>Write&lt;/li>
&lt;li>Read&lt;/li>
&lt;/ul>
&lt;h3 id="platform-roles">Platform Roles&lt;/h3>
&lt;p>Platform admins have full control when interacting with the CLI, UI, and API.&lt;/p>
&lt;h3 id="source-provider-roles">Source Provider Roles:&lt;/h3>
&lt;p>Admins within the GitHub organization have the option to use GitHub orgs to allow users to have permissions on all repositories in the org, or to use fine-grained access of adding access for users directly to individual repositories.&lt;/p>
&lt;h4 id="admin">Admin&lt;/h4>
&lt;p>The &lt;strong>admin&lt;/strong> role enables full access to the repository, which grants the following access levels for resources:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Access&lt;/th>
&lt;th style="text-align:center">Repo&lt;/th>
&lt;th style="text-align:center">Build&lt;/th>
&lt;th style="text-align:center">Step&lt;/th>
&lt;th style="text-align:center">Service&lt;/th>
&lt;th style="text-align:center">Log&lt;/th>
&lt;th style="text-align:center">Secret&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Write&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Read&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="write">Write&lt;/h4>
&lt;p>The &lt;strong>write&lt;/strong> role enables read and write access to the repository, which grants the following access levels for resources:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Access&lt;/th>
&lt;th style="text-align:center">Repo&lt;/th>
&lt;th style="text-align:center">Build&lt;/th>
&lt;th style="text-align:center">Step&lt;/th>
&lt;th style="text-align:center">Service&lt;/th>
&lt;th style="text-align:center">Log&lt;/th>
&lt;th style="text-align:center">Secret&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Write&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Read&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="read">Read&lt;/h4>
&lt;p>The &lt;strong>read&lt;/strong> role enables read access to the repository, which grants the following access levels for resources:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Access&lt;/th>
&lt;th style="text-align:center">Repo&lt;/th>
&lt;th style="text-align:center">Build&lt;/th>
&lt;th style="text-align:center">Step&lt;/th>
&lt;th style="text-align:center">Service&lt;/th>
&lt;th style="text-align:center">Log&lt;/th>
&lt;th style="text-align:center">Secret&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Write&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Read&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Usage: Enable a Repo</title><link>https://go-vela.github.io/docs/usage/getting-started/enable_repo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-vela.github.io/docs/usage/getting-started/enable_repo/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;/div>
&lt;h3 id="via-the-ui">Via the UI&lt;/h3>
&lt;p>For this example, we&amp;rsquo;ll go over using the UI to add the repo. You can always head over to the &lt;a href="https://go-vela.github.io/docs/docs/cli/repo/add/">CLI docs&lt;/a> for docs on how to add a repo via CLI.&lt;/p>
&lt;ol>
&lt;li>Log into your Vela instance.&lt;/li>
&lt;li>Click &amp;ldquo;Add Repositories&amp;rdquo;.&lt;/li>
&lt;li>Select the Org from the available list.&lt;/li>
&lt;li>Click &amp;ldquo;Add&amp;rdquo; next to the repo you would like to add.
&lt;ol>
&lt;li>Alternatively you can &amp;ldquo;Add All&amp;rdquo; repos in an org.&lt;/li>
&lt;li>If your repo doesn&amp;rsquo;t exist, try clicking &amp;ldquo;Refresh List&amp;rdquo; in the top right.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>Your repo now has the necessary web hook to Vela.&lt;/p></description></item><item><title>Usage: Start a Build</title><link>https://go-vela.github.io/docs/usage/getting-started/start_build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-vela.github.io/docs/usage/getting-started/start_build/</guid><description>
&lt;p>If you&amp;rsquo;ve followed the documentation for &lt;a href="https://go-vela.github.io/docs/docs/usage/getting-started/enable_repo/">enabling a repo&lt;/a> and &lt;a href="https://go-vela.github.io/docs/docs/usage/getting-started/write_pipeline/">writing a pipeline&lt;/a>, all that should be left is to push your pipeline to your repo.&lt;/p>
&lt;p>If a build does not trigger when your push a change to your repo, check the webhook response to see if there is an error.&lt;/p></description></item><item><title>Usage: Skipping a Build</title><link>https://go-vela.github.io/docs/usage/getting-started/skipping_build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-vela.github.io/docs/usage/getting-started/skipping_build/</guid><description>
&lt;p>To prevent Vela from running a build for a commit, add one of the following to your commit title or message:&lt;/p>
&lt;ul>
&lt;li>&lt;code>[skip ci]&lt;/code>&lt;/li>
&lt;li>&lt;code>[ci skip]&lt;/code>&lt;/li>
&lt;li>&lt;code>[skip vela]&lt;/code>&lt;/li>
&lt;li>&lt;code>[vela skip]&lt;/code>&lt;/li>
&lt;li>&lt;code>***no_ci***&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;/div>
&lt;p>Vela will receive the payload from the source control provider and return a 200 response with a reason for why a build was not triggered.&lt;/p></description></item><item><title>Usage: Understanding the Workspace</title><link>https://go-vela.github.io/docs/usage/getting-started/workspace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-vela.github.io/docs/usage/getting-started/workspace/</guid><description>
&lt;p>Vela uses a shared volume model between steps to allow shared file system during the build process. These volumes should be considered ephemeral in the sense once a build completes execution all data via the volume being destroyed.&lt;/p>
&lt;h2 id="working-directory">Working Directory&lt;/h2>
&lt;p>This ensures the configuration, code, dependencies, and compiled binaries are persisted and shared between the steps. The default workspace attached to every build is unique and matches the below pattern:&lt;/p>
&lt;p>&lt;strong>Source:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># Syntax&lt;/span>
/vela/src/&amp;lt;source_provider/&amp;lt;&lt;span style="color:#204a87">source&lt;/span> org&amp;gt;/&amp;lt;&lt;span style="color:#204a87">source&lt;/span> repo&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># Example&lt;/span>
/vela/src/github.com/go-vela/hello-world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Secrets:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># Syntax&lt;/span>
/vela/secrets/&amp;lt;path&amp;gt;/&amp;lt;key&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># Example&lt;/span>
/vela/secrets/github/username/
/vela/secrets/github/password/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Parameters:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># Syntax&lt;/span>
/vela/secrets/&amp;lt;path&amp;gt;/&amp;lt;key&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># Example&lt;/span>
/vela/parameters/github/repo/settings/topics
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;!-- raw HTML omitted -->
&lt;/div>
&lt;p>This would be the equivalent to the following Docker commands being executed:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker volume create build-workspace
docker run --volume&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>build-workspace:/vela/ &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cloning">Cloning&lt;/h2>
&lt;p>Vela automatically checks out the repository into a local volume that is mounted into each Docker container. This volume is generally referred to as a workspace, which defines the working directory shared by all steps in a build.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git clone https://github.com/go-vela/hello-world.git &amp;lt;workspace&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;!-- raw HTML omitted -->
&lt;/div></description></item><item><title>Usage: Using the Environment</title><link>https://go-vela.github.io/docs/usage/getting-started/environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-vela.github.io/docs/usage/getting-started/environment/</guid><description>
&lt;p>Vela provides the ability to define environment variables scoped to individual steps, services and secrets. Pleas note the environment is design to be unique per container. Vela does inject a variety of default values from build, repo and user information.&lt;/p>
&lt;p>Defaults:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://go-vela.github.io/docs/concepts/pipeline/services/environment/#defaults">Services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://go-vela.github.io/docs/concepts/pipeline/steps/environment/#defaults">Steps&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>The following &lt;a href="https://go-vela.github.io/docs/docs/concepts/pipeline">pipeline concepts&lt;/a> are being used in the pipeline below:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://go-vela.github.io/docs/docs/concepts/pipeline/services/">Services&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://go-vela.github.io/docs/docs/concepts/pipeline/steps/environment/">Environment&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://go-vela.github.io/docs/docs/concepts/pipeline/steps/">Steps&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://go-vela.github.io/docs/docs/concepts/pipeline/steps/environment/">Environment&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://go-vela.github.io/docs/docs/concepts/pipeline/secrets/">Secrets&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://go-vela.github.io/docs/docs/concepts/pipeline/steps/origin/">Origin&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;/div>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">version: &amp;#34;1&amp;#34;
services:
- name: redis
&lt;span style="color:#00a000">+ environment:
&lt;/span>&lt;span style="color:#00a000">+ EXAMPLE: Hello, World!
&lt;/span>&lt;span style="color:#00a000">&lt;/span> image: redis:latest
steps:
- name: check status
image: redis:latest
&lt;span style="color:#00a000">+ environment:
&lt;/span>&lt;span style="color:#00a000">+ EXAMPLE: Hello, World!
&lt;/span>&lt;span style="color:#00a000">&lt;/span> commands:
# you can use bash commands in-line to set or override variables
- export EXAMPLE=&amp;#34;Hello World From Vela Team&amp;#34;
- echo ${EXAMPLE}
secrets:
- origin:
name: private vault
image: target/secret-vault:latest
&lt;span style="color:#00a000">+ environment:
&lt;/span>&lt;span style="color:#00a000">+ EXAMPLE: Hello, World!
&lt;/span>&lt;span style="color:#00a000">&lt;/span> secrets: [ vault_token ]
parameters:
addr: vault.example.com
auth_method: token
username: octocat
items:
- source: secret/docker
path: docker
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>